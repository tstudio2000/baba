name: Handle Authentication and Listings
on:
  repository_dispatch:
    types: [send-code, verify-code, create-listing]

jobs:
  handle-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install axios

      - name: Handle request
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          node -e "
          const fs = require('fs');
          const axios = require('axios');

          const event = JSON.parse(process.env.GITHUB_EVENT || '{}');
          const type = event.action;
          const payload = event.client_payload || {};

          const usersFile = 'users.json';
          const codesFile = 'codes.json';
          const listingsFile = 'listings.json';

          // Initialize files if they don't exist
          if (!fs.existsSync(codesFile)) {
            fs.writeFileSync(codesFile, '[]');
          }
          if (!fs.existsSync(usersFile)) {
            fs.writeFileSync(usersFile, '[]');
          }
          if (!fs.existsSync(listingsFile)) {
            fs.writeFileSync(listingsFile, '[]');
          }

          async function sendTelegramMessage(chatId, message) {
            try {
              await axios.post(\`https://api.telegram.org/bot\${process.env.TELEGRAM_BOT_TOKEN}/sendMessage\`, {
                chat_id: chatId,
                text: message
              });
            } catch (error) {
              console.error('Ошибка при отправке сообщения в Telegram:', error.message);
              throw error;
            }
          }

          async function getFileSha(filePath) {
            try {
              const response = await axios.get(\`https://api.github.com/repos/\${process.env.GITHUB_REPOSITORY}/contents/\${filePath}\`, {
                headers: { Authorization: \`Bearer \${process.env.TOKEN}\` }
              });
              return response.data.sha;
            } catch (error) {
              if (error.response && error.response.status === 404) {
                return null; // File doesn't exist yet
              }
              throw error;
            }
          }

          async function updateFile(filePath, content, message) {
            const sha = await getFileSha(filePath);
            await axios.put(
              \`https://api.github.com/repos/\${process.env.GITHUB_REPOSITORY}/contents/\${filePath}\`,
              {
                message,
                content: Buffer.from(JSON.stringify(content, null, 2)).toString('base64'),
                sha: sha || undefined
              },
              { headers: { Authorization: \`Bearer \${process.env.TOKEN}\` } }
            );
          }

          async function main() {
            try {
              if (type === 'send-code') {
                const { phoneNumber, telegramId } = payload;
                if (!phoneNumber || !telegramId) throw new Error('phoneNumber and telegramId required');
                
                const code = Math.floor(100000 + Math.random() * 900000).toString();
                
                // Save code
                let codes = JSON.parse(fs.readFileSync(codesFile));
                codes = codes.filter(c => c.phoneNumber !== phoneNumber);
                codes.push({ phoneNumber, telegramId, code, createdAt: new Date().toISOString() });
                fs.writeFileSync(codesFile, JSON.stringify(codes, null, 2));
                
                // Send code via Telegram
                await sendTelegramMessage(telegramId, \`Ваш код подтверждения: \${code}\`);
                
                // Commit codes.json
                await updateFile(codesFile, codes, 'Update codes.json');
              }
              
              if (type === 'verify-code') {
                const { phoneNumber, code } = payload;
                if (!phoneNumber || !code) throw new Error('phoneNumber and code required');
                
                const codes = JSON.parse(fs.readFileSync(codesFile));
                const match = codes.find(c => c.phoneNumber === phoneNumber && c.code === code);
                
                if (match) {
                  // Save user
                  let users = JSON.parse(fs.readFileSync(usersFile));
                  users = users.filter(u => u.phoneNumber !== phoneNumber);
                  users.push({ phoneNumber, telegramId: match.telegramId, createdAt: new Date().toISOString() });
                  fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
                  
                  // Commit users.json
                  await updateFile(usersFile, users, 'Update users.json');
                  
                  // Remove code
                  codes = codes.filter(c => c.phoneNumber !== phoneNumber);
                  fs.writeFileSync(codesFile, JSON.stringify(codes, null, 2));
                  
                  // Commit codes.json
                  await updateFile(codesFile, codes, 'Update codes.json');
                } else {
                  throw new Error('Invalid code or phone number');
                }
              }
              
              if (type === 'create-listing') {
                const { title, price, description } = payload;
                if (!title || !price || !description) throw new Error('title, price, and description required');
                
                let listings = JSON.parse(fs.readFileSync(listingsFile));
                listings.push({ id: Date.now().toString(), title, price: parseFloat(price), description, createdAt: new Date().toISOString() });
                fs.writeFileSync(listingsFile, JSON.stringify(listings, null, 2));
                
                // Commit listings.json
                await updateFile(listingsFile, listings, 'Update listings.json');
              }
            } catch (error) {
              console.error('Ошибка:', error.message);
              process.exit(1);
            }
          }

          main().catch(err => {
            console.error('Main error:', err);
            process.exit(1);
          });
          "
